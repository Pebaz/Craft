
    // TODO(pebaz): Change this to a function call so it's:
    /*
    Result * result123 = craft_crashed();
    if (result123.is_error) { return result123.error; }
    else { return result123.value; }
    */
    if (PyErr_Occurred())
    {
        //PyErr_Print();

        //PyObject * ERROR_TYPE = PyErr_Occurred();
        PyObject * ERROR_TYPE, * ERROR, * traceback;
        PyErr_Fetch(&ERROR_TYPE, &ERROR, &traceback);

        printf("Uh oh!\n");
        
        PyErr_Clear();

        PyObject * RETURN_VALUE = Py_None;
        PyObject * RETURN_ERROR = Py_None;


        // Check and see if it's a return/break/etc. exception or normal error
        if (PyObject_IsInstance(PyObject_Type(ERROR_TYPE), PyObject_Type(CraftFunctionReturnException)))
        {
            printf("CraftFunctionReturnException\n");
            RETURN_VALUE = PyObject_GetAttrString(ERROR, "return_value");
        }

        // Real Exception. This makes sure an Exception object is returned.
        else
        {
            PyObject * py_dict = PyDict_New();
            PyObject * py_list = PyList_New(1);
            PyList_SetItem(py_list, 0, ERROR);
            PyDict_SetItemString(py_dict, "args", py_list);
            RETURN_ERROR = PyErr_NewException("builtins.Exception", NULL, py_dict);
        }

        // Py_BuildValue("(O, O)", RETURN_VALUE, RETURN_ERROR);
        // PyObject * ARGS_result = PyTuple_New(2);
        // PyTuple_SET_ITEM(ARGS_result, 0, RETURN_VALUE);
        // PyTuple_SET_ITEM(ARGS_result, 1, RETURN_ERROR);
        // PyObject * RET_result = PyObject_Call(get_result, ARGS_result, NULL);
        PyObject * RET_result = PyObject_Call(get_result, Py_BuildValue("(O, O)", RETURN_VALUE, RETURN_ERROR), NULL);

        PyGILState_Release(gstate);
        return RET_result;
        
    } else {
        //printf("All good\n");
    }
