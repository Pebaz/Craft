
if (PyErr_Occurred())
{
	PyObject * ERROR_TYPE = PyErr_Occurred();
	PyObject * type, * ERROR, * traceback;
	PyErr_Fetch(&type, &ERROR, &traceback);

	printf("Uh oh!\n");
	// NOTE(pebaz): Use this to view error: PyErr_Print();
	PyErr_Print();
	PyErr_Clear();
	//PyErr_SetString(PyExc_NameError, "Craft Error!\n");
	//return 0;

	// Create a Python Result object to return
    PyObject * ARGS_result = PyTuple_New(2);
    PyTuple_SET_ITEM(ARGS_result, 0, Py_BuildValue("s", "Craft Error!"));
	PyTuple_SET_ITEM(ARGS_result, 1, Py_True);
    PyObject * RET_result = PyObject_Call(get_result, ARGS_result, NULL);

	if (RET_result != NULL)
	{
		// Check and see if it's a return/break/etc. exception or normal error
		// ...

		// Problem(pebaz):  This function can return a bare string.
		// Solution(pebaz): Always return an Exception instance.
		// Possible(pebaz): Throw a new error with that string and then get it's instance

		//if (PyObject_IsInstance(PyObject_Type(ERROR), PyObject_Type(ERROR_TYPE)))
		if (PyObject_IsInstance(PyObject_Type(ERROR), PyObject_Type(Py_BuildValue("s", "s"))))
		{
			printf("IT'S AN OBJECT?\n");
			//ERROR = PyErr_NewException()
		}

		PyObject * py_dict = PyDict_New();
		PyObject * py_list = PyList_New(1);
		PyList_SetItem(py_list, 0, ERROR);
		PyDict_SetItemString(py_dict, "args", py_list);
		PyObject * CRAFT_ERROR = PyErr_NewException("builtins.Exception", NULL, py_dict);

		if (PyObject_SetAttrString(RET_result, "err", CRAFT_ERROR) != 0)
		{
			PyErr_Print(); PyErr_Clear(); RET_result = Py_None;
		}

		PyGILState_Release(gstate);
		return RET_result;
	}
	
	else {
		PyErr_Print();
		PyGILState_Release(gstate);
		return Py_None;
	}
	
} else {
	//printf("All good\n");
}
